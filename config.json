{
  "name": "toolchain",
  "config": "#TOOLCHAIN_TYPE=\"elf32\"\nTOOLCHAIN_TYPE=\"glibc\"\nARC_VERSION=archs\nLINUX_IMAGE=\"/home/cmiranda/tmp1/vmlinux\"\n\nDEJAGNU_TEST=arc.exp\n\n# Do not change below this line\nWORKSPACE_DIR=\"$(pwd)/workspace\"\nSOURCE_DIR=\"$(pwd)/sources\"\nINSTALL_DIR=\"$(pwd)/install\"\n\n# Mising variables:\n#DEJAGNU_TEST=\n",
  "sources": {
    "binutils": {
      "repo": "https://github.com/foss-for-synopsys-dwc-arc-processors/binutils-gdb.git"
    },
    "glibc": {
      "repo": "https://github.com/foss-for-synopsys-dwc-arc-processors/glibc.git"
    },
    "newlib": {
      "repo": "https://github.com/foss-for-synopsys-dwc-arc-processors/newlib.git"
    },
    "linux": {
      "repo": "git@github.com:foss-for-synopsys-dwc-arc-processors/linux.git"
    },
    "gcc": {
      "repo": "https://github.com/foss-for-synopsys-dwc-arc-processors/gcc.git"
    },
    "uclibc-ng": {
      "repo": "https://cgit.uclibc-ng.org/cgi/cgit/uclibc-ng.git/"
    },
    "toolchain": {
      "repo": "https://github.com/foss-for-synopsys-dwc-arc-processors/toolchain.git"
    },
    "gdb": {
      "repo": "https://github.com/foss-for-synopsys-dwc-arc-processors/binutils-gdb.git"
    },
    "qemu": {
      "repo": "git@github.com:foss-for-synopsys-dwc-arc-processors/qemu.git"
    }
  },
  "tasks": {
    "build-gcc": {
      "code": "#!/bin/bash\n# Code for task build.\n#\n# Persistent: true\n# DependsOn:\n# Vars: WORKSPACE_DIR SOURCE_DIR TOOLCHAIN_TYPE INSTALL_DIR ARC_VERSION\n#\n# Please edit this file to execute the desired operation.\n# Return 0 for success != 0 for fail.\n# The return value determines when persistency is satifiable.\n\n\n#!/bin/bash\n\nmkdir -p ${WORKSPACE_DIR}\ncd ${WORKSPACE_DIR}\nBUILD_DIR=\"${WORKSPACE_DIR}/build\"\n\ncp -aHf ${SOURCE_DIR}/toolchain ${WORKSPACE_DIR}/toolchain\n#cp -aHf ${SOURCE_DIR}/verification-scripts ${WORKSPACE_DIR}/verification-scripts\nln -sf ${SOURCE_DIR}/binutils ${WORKSPACE_DIR}/.\nln -sf ${SOURCE_DIR}/gdb ${WORKSPACE_DIR}/.\nln -sf ${SOURCE_DIR}/gcc ${WORKSPACE_DIR}/.\nln -sf ${SOURCE_DIR}/newlib ${WORKSPACE_DIR}/.\nln -sf ${SOURCE_DIR}/uClibc ${WORKSPACE_DIR}/.\nln -sf ${SOURCE_DIR}/linux ${WORKSPACE_DIR}/.\nln -sf ${SOURCE_DIR}/glibc ${WORKSPACE_DIR}/.\n\ncd ${SOURCE_DIR}/toolchain && git checkout arc-dev\n\ncd ${WORKSPACE_DIR}/toolchain\nmkdir -p ${BUILD_DIR}\n\nif [ \"${TOOLCHAIN_TYPE}\" = \"elf32\" ]; then\n  ELF_TOOLCHAIN=\"y\"\nelif [ \"${TOOLCHAIN_TYPE}\" = \"uclibc\" ]; then\n  UCLIBC_TOOLCHAIN=\"y\"\nelif [ \"${TOOLCHAIN_TYPE}\" = \"glibc\" ]; then\n  GLIBC_TOOLCHAIN=\"y\"\nelse\n  echo \"TOOLCHAIN should be either elf32, uclibc or glibc\"\n  exit 1\nfi\n\n\nOPTIONS=\"--no-multilib --elf32\"\nif [ \"${UCLIBC_TOOLCHAIN}\" = \"y\" ]; then\nOPTIONS=\"${OPTIONS} --uclibc\"\nelse\nOPTIONS=\"${OPTIONS} --no-uclibc\"\nfi\nif [ \"${GLIBC_TOOLCHAIN}\" = \"y\" ]; then\nOPTIONS=\"${OPTIONS} --glibc\"\nelse\nOPTIONS=\"${OPTIONS} --no-glibc\"\nfi\n\nARC_VERSION=archs\n\n./build-all.sh --config-extra --with-python=no \\\n--no-auto-pull --no-auto-checkout --no-optsize-newlib \\\n--no-optsize-libstdc++ --no-external-download \\\n${OPTIONS} --cpu ${ARC_VERSION}  \\\n--build-dir ${BUILD_DIR} \\\n--target-cflags \"-O2 -g -mcpu=archs\" --release-name \"arcker build\" \\\n--install-dir ${INSTALL_DIR} \\\n--native-gdb \\\n--no-pdf\n\nexit $?\n",
      "dirty": false
    },
    "test": {
      "code": "#!/bin/bash\n# Code for task test.\n#\n# Persistent: true\n# DependsOn: test-qemu-smoke test-dejagnu\n# Vars:\n#\n# Please edit this file to execute the desired operation.\n# Return 0 for success != 0 for fail.\n# The return value determines when persistency is satifiable.\n\nexit 0\n",
      "dirty": true
    },
    "build-qemu": {
      "code": "#!/bin/bash\n# Code for task build-qemu.\n#\n# Persistent: true\n# DependsOn:\n# Vars: SOURCE_DIR WORKSPACE_DIR INSTALL_DIR\n#\n# Please edit this file to execute the desired operation.\n# Return 0 for success != 0 for fail.\n# The return value determines when persistency is satifiable.\n\nset -e\n\nmkdir -p ${WORKSPACE_DIR}/build/qemu\ncd ${WORKSPACE_DIR}/build/qemu\n${SOURCE_DIR}/qemu/configure --target-list=arc-softmmu --enable-debug --disable-pie --prefix=${INSTALL_DIR} --extra-cflags=-\"O0 -g3\"\nmake -j 8\nmake install\n\nexit $?\n",
      "dirty": false
    },
    "build": {
      "code": "#!/bin/bash\n# Code for task build.\n#\n# Persistent: false\n# DependsOn: build-gcc build-qemu\n# Vars:\n#\n# Please edit this file to execute the desired operation.\n# Return 0 for success != 0 for fail.\n# The return value determines when persistency is satifiable.\n\nexit 0\n",
      "dirty": true
    },
    "test-qemu-smoke": {
      "code": "#!/bin/bash\n# Code for task test-qemu-smoke.\n#\n# Persistent: false\n# DependsOn: build-qemu\n# Vars: WORKSPACE_DIR INSTALL_DIR TOOLCHAIN_TYPE\n#\n# Please edit this file to execute the desired operation.\n# Return 0 for success != 0 for fail.\n# The return value determines when persistency is satifiable.\n\nset -e\n\nif [ \"$TOOLCHAIN_TYPE\" = \"elf32\" ]\nthen\n  export PATH=${INSTALL_DIR}/bin:$PATH\n\n  cd ${WORKSPACE_DIR}/build/qemu/tests/tcg/arc\n  make\n  make check\nfi\n\nexit $?\n",
      "dirty": true
    },
    "qemu-start": {
      "code": "\n#!/bin/bash\n# Code for task qemu-start.\n#\n# Persistent: false\n# DependsOn:\n# Vars: INSTALL_DIR LINUX_IMAGE\n#\n# Please edit this file to execute the desired operation.\n# Return 0 for success != 0 for fail.\n# The return value determines when persistency is satifiable.\n\nset -e\n\n\n${INSTALL_DIR}/bin/qemu-system-arc -M simhs -nographic -no-reboot -cpu archs -netdev user,id=net0 -device virtio-net-device,netdev=net0 -netdev user,id=net,hostfwd=tcp::5555-:21,hostfwd=tcp::5556-:23,hostfwd=tcp::5557-:1337 -device virtio-net-device,netdev=net -kernel ${LINUX_IMAGE}\n\nexit $?\n",
      "dirty": true
    },
    "test-dejagnu": {
      "code": "#!/bin/bash\n# Code for task test-dejagnu.\n#\n# Persistent: false\n# DependsOn:\n# Vars: SOURCE_DIR WORKSPACE_DIR INSTALL_DIR TOOLCHAIN_TYPE ARC_VERSION DEJAGNU_TEST\n#\n# Please edit this file to execute the desired operation.\n# Return 0 for success != 0 for fail.\n# The return value determines when persistency is satifiable.\n\n#! /bin/sh\n\n# baremetal?\nif [ \"X${TOOLCHAIN_TYPE}\" = \"Xelf32\" ]\nthen\n  # act based on cpu tupe\n  if [ \"X${ARC_VERSION}\" = \"Xarchs\" ]\n  then\n    unset ARC_MULTILIB_OPTIONS\n  else\n    export ARC_MULTILIB_OPTIONS=\"cpu=${ARC_VERSION}\"\n  fi\n  \n  TARGET_TRIPLET=arc-unknown-elf32\n  TARGET_ALIAS=arc-elf32\n  TARGET_LIST=arc-sim-qemu\n# glibc/uclibc linux\nelse\n\n  mkdir -p ${WORKSPACE_DIR}/tmp\n  cat > ${WORKSPACE_DIR}/tmp/verify_ftp_telnet.expect << EOF\n  set timeout 6\n  spawn telnet localhost 5556\n  expect \"/ #\" {} timeout {exit 1}\n  send \"exit\\n\"\n  \n  spawn ftp localhost 5555\n  expect \":\" {} timeout {exit 1}\n  send \"root\\n\"\n  expect \"Password:\" {} timeout {exit 1}\n  send \"\\n\"\n  expect \"Operation successful\" {} timeout {exit 1}\n  expect \"ftp>\" {} timeout {exit 1}\n  send \"exit\\n\"\nEOF\n\n  expect ${WORKSPACE_DIR}/tmp/verify_ftp_telnet.expect\n  rm ${WORKSPACE_DIR}/tmp/verify_ftp_telnet.expect\n\n  if [ $? != \"0\"]\n  then\n    echo \"QEMU does not seems to be running. run it with qemu-start or qemu-start-background\"\n    exit 1\n  fi\n\n  TARGET_TRIPLET=arc-linux-gnu\n  TARGET_ALIAS=arc-linux-gnu\n  TARGET_LIST=arc-linux-qemu\n\n  # UCLIBC in the name of variable is misleading,\n  # this works for both glibc and uclibc\n  export ARC_TEST_ADDR_UCLIBC=localhost\n\n  tar -c ${INSTALL_DIR}/arc-snps-linux-gnu/sysroot/lib/* > /tmp/libc.tar\n\n  cat > ${WORKSPACE_DIR}/tmp/copy_and_uncompress.sh << EOF\n  #!/bin/expect\n\n  set timeout 60\n  spawn ftp localhost 5555\n  expect \":\"\n  send \"root\\n\"\n  expect \"Password:\"\n  send \"\\n\"\n  expect \"ftp>\"\n  send \"binary\\n\"\n  expect \"ftp>\"\n  send \"put /tmp/libc.tar\\n\"\n  expect \"ftp>\"\n  send \"exit\\n\"\n\n  spawn telnet localhost 5556\n  expect \"/ #\"\n  send \"mkdir -p /libc; cd libc\\n\"\n  expect \"/libc #\"\n  send \"tar -xvvf /tmp/libc.tar\\n\"\n  expect \"/libc #\"\n  send \"rm /tmp/libc.tar\\n\"\n  expect \"/libc #\"\n  send \"exit\\n\"\nEOF\n\n  expect ${WORKSPACE_DIR}/tmp/copy_and_uncompress.sh\n  rm ${WORKSPACE_DIR}/tmp/copy_and_uncompress.sh\n  rmdir ${WORKSPACE_DIR}/tmp\nfi\n\n# we want arc-dev\ncd ${SOURCE_DIR}/toolchain && git checkout arc-dev\n\nmkdir -p ${WORKSPACE_DIR}/dejagnu\ncd ${WORKSPACE_DIR}/dejagnu\n\nexport QEMU_HOME=${INSTALL_DIR}\nexport COMPROOT=${INSTALL_DIR}\nexport COMPSRC=${SOURCE_DIR}\nexport DEJAGNU=${SOURCE_DIR}/toolchain/site.exp\nexport LD_LIBRARY_PATH=${INSTALL_DIR}/lib:${LD_LIBRARY_PATH}\nexport PATH=${INSTALL_DIR}/bin:${PATH}\n\n\n# crate a new site.exp\nrm -f site.exp\ncat > site.exp << EOF\nset rootme \".\"\nset tmpdir \"./tmp\"\nset srcdir \"\\$env(COMPSRC)/gcc/gcc/testsuite\"\nset toolchain_sysroot \"/toolchain_sysroot\"\n\nset target_triplet ${TARGET_TRIPLET}\nset target_alias ${TARGET_ALIAS}\n\nset tool gcc\nset target_list ${TARGET_LIST}\n\nset CFLAGS \"\"\nset CXXFLAGS \"\"\n\nset arc_board_dir \"\\$env(COMPSRC)/toolchain\"\nif ![info exists boards_dir] {\n    lappend boards_dir \"$arc_board_dir/dejagnu\"\n    lappend boards_dir \"$arc_board_dir/dejagnu/baseboards\"\n} else {\n    set boards_dir \"$arc_board_dir/dejagnu\"\n    lappend boards_dir \"$arc_board_dir/dejagnu/baseboards\"\n}\nEOF\n\n\nruntest ${DEJAGNU_TEST}\n\nexit $?\nexit 0\n",
      "dirty": true
    },
    "qemu-stop": {
      "code": "#!/bin/bash\n# Code for task qemu-stop.\n#\n# Persistent: false\n# DependsOn:\n# Vars:\n#\n# Please edit this file to execute the desired operation.\n# Return 0 for success != 0 for fail.\n# The return value determines when persistency is satifiable.\n\nif [ ! -f .qemu.pid ]; then\n\techo \"qemu.pid does not exists\"\n        exit 1\nfi\n\nPID=$(cat .qemu.pid)\necho \"Killing QEMU with process ${PID}\"\nkill -s KILL ${PID}\nrm -f .qemu.pid\nexit 0\n",
      "dirty": true
    },
    "qemu-start-background": {
      "code": "#!/bin/bash\n# Code for task qemu-start-background.\n#\n# Persistent: false\n# DependsOn:\n# Vars: WORKSPACE_DIR\n#\n# Please edit this file to execute the desired operation.\n# Return 0 for success != 0 for fail.\n# The return value determines when persistency is satifiable.\n\nPID=`pgrep qemu-system-arc`\necho \"PID=${PID}\"\nif [ \"${PID}\" = \"\" ]; then\n  CMD=\"${INSTALL_DIR}/bin/qemu-system-arc -M simhs -nographic -no-reboot -cpu archs -netdev user,id=net0 -device virtio-net-device,netdev=net0 -netdev user,id=net,hostfwd=tcp::5555-:21,hostfwd=tcp::5556-:23,hostfwd=tcp::5557-:1337 -device virtio-net-device,netdev=net -kernel ${LINUX_IMAGE}\"\n  $CMD 2>&1 | cat > /dev/null &\n  PID=$!\n\n  echo \"${PID}\" > .qemu.pid\n  echo \"Started QEMU with PID ${PID}\"\n\n  sleep 5\nfi\n\nmkdir -p ${WORKSPACE_DIR}/scripts\ncat > ${WORKSPACE_DIR}/scripts/verify_ftp_telnet.expect << EOF\nset timeout 6\nspawn telnet localhost 5556\nexpect \"/ #\" {} timeout {exit 1}\nsend \"exit\\n\"\n\nspawn ftp localhost 5555\nexpect \":\" {} timeout {exit 1}\nsend \"root\\n\"\nexpect \"Password:\" {} timeout {exit 1}\nsend \"\\n\"\nexpect \"Operation successful\" {} timeout {exit 1}\nexpect \"ftp>\" {} timeout {exit 1}\nsend \"exit\\n\"\n\nEOF\n\nfor COUNTER in 1 2 3 4 5 6 7 8 9 10\ndo\n  echo \"COUNTING ${COUNTER}\"\n\n  expect ${WORKSPACE_DIR}/scripts/verify_ftp_telnet.expect\n  RESULT=$?\n  echo \"RESULT = ${RESULT}\"\n  if [ \"${RESULT}\" = \"0\" ]\n  then\n\t  exit 0\n  fi\ndone\necho \"FAILED\"\n\nkill -s KILL ${PID}\nexit 1\n",
      "dirty": true
    }
  },
  "configs": {
  }
}
